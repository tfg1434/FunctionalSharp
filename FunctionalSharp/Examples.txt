int[] SeriesUp(int n) {
    int[] res = new int[n * (n + 1) / 2];
    int pos = 0;
    int i = 1;

    while (i <= n + 1) {
        for (int j = 1; j < i; j++)
            res[pos++] = j;
        i++;
    }

    return res;
}

int[] SeriesUp(int n) {
    var oneToN = (int x) => Range(from: 1, to: x);
    
    return Range(from: 1, to: n)
        .Map(oneToN)
        .Flatten()
        .ToArray();
}



bool TryParseTemp(string json, [MaybeNullWhen(false)] out double temp, 
    [MaybeNullWhen(true)] out Exception exception) {
    
    try {
        object? obj = Parse(json);
        Weather weather = CreateWeather(obj);
        temp = weather.Temperature;
        exception = null;
        
        return true;
        
    } catch (Exception ex) {
        exception = ex;
        temp = default;
        
        return false;
    }
}

Try<double> ParseTemp(string json)
    => from obj in Parse(json)
       let weather = CreateWeather(obj)
       from temp in weather.Map(w => w.Temperature)
       select temp;
       
       
       
Lst<int> QuickSort(Lst<int> list) {
    if (list.Count == 0) return Lst<int>.Empty;

    int x = list.Head();
    Lst<int> xs = list.Tail();
    
    var smaller = QuickSort(xs.Where(a => a <= x).ToLst());
    var bigger = QuickSort(xs.Where(a => a > x).ToLst());

    return smaller + List(x) + bigger;
}

void QuickSort(int[] arr, int start, int end) {
    int i;
    
    if (start < end) {
        i = Partition(arr, start, end);

        QuickSort(arr, start, i - 1);
        QuickSort(arr, i + 1, end);
    }
}

int Partition(int[] arr, int start, int end) {
    int temp;
    int p = arr[end];
    int i = start - 1;

    for (int j = start; j <= end - 1; j++) {
        if (arr[j] > p) continue;
        
        i++;
        temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    temp = arr[i + 1];
    arr[i + 1] = arr[end];
    arr[end] = temp;

    return i + 1;
}